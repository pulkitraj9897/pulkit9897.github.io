{"version":3,"mappings":"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","names":["Dropdown","disabled","visible","useState","setVisible","hide","jsx","Tooltip","Tippy","item","index","React","dropdownItem","show","DefaultDropdownProps","DropdownPortal","container","height","StagesCustomization","setMainViewVisibility","setStageViewPosition","handleViewChange","e","Fragment","jsxs","ViewIcon","mainViewVisibility","MainViewVisibility","handlePositionChange","StageViewPosition","stageViewPosition","Filter","useFilter","Result","allVisible","resetStatuses","visibleStatuses","classNames","DataTreeView","search","setSearch","handleSelect","event","nodeId","onNodeSelect","filteredStages","stage","TreeNode","selected","isSelected","isExpanded","setIsExpanded","hasSelectedDescendant","child","useEffect","filterStageTree","Total","hasChildren","stages","filteredChildren","LOG_FETCH_SIZE","POLL_INTERVAL","run","loading","props","stepBuffers","setStepBuffers","useRef","startByte","stepBuffer","stepId","forceUpdate","response","newLogLines","prev","parseUrlParams","useCallback","steps","params","step","s","expanded","updateStepConsoleOffset","setOpenStage","userManuallySetNode","selectedStep","selectedStepResult","stepResult","getDefaultSelectedStep","defaultStep","setExpandedSteps","startPollingPipeline","getRunSteps","data","hasNewSteps","stepsRef","setSteps","handleStageSelect","openStage","lastStep","setUserManuallySetNode","expandedSteps","id","onMoreConsoleClick","getStageSteps","getStageStepBuffers","buffers","stageId","findStage","onStepToggle","polling","getStateUpdateFn","resolve","interval","ScrollToTopBottom","isAtTop","setIsAtTop","updateScrollState","docHeight","atTop","scrollTop","atBottom","windowHeight","scrollable","setIsAtBottom","offset","distanceFromBottom","observer","scrollToTop","isScrollable","scrollToBottom","SplitView","setTreeViewWidth","setStageViewWidth","setStageViewHeight","useLayoutPreferences","direction","isDragging","setIsDragging","isVertical","stageViewWidth","setPanelSize","storageKey","treeViewWidth","stageViewHeight","panelSize","dividerRef","stopDragging","handleDragging","newSize","getContainerOffset","clampedSize","resetSize","containerRef","rect","childrenArray","gridTemplate","startDragging","StageNodeLink","agent","href","getAgentUrl","name","agentName","CONSOLE","resultToColor","StatusIcon","exact","Started","ConsoleLogStream","__vitePreload","handleToggle","getTruncatedLogWarning"],"ignoreList":[],"sources":["../../../../frontend/common/components/dropdown.tsx","../../../../frontend/common/components/dropdown-portal.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/components/skeleton.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/components/stages-customization.tsx","../../../../frontend/common/components/filter.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/DataTreeView.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/PipelineConsoleModel.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/hooks/use-steps-poller.ts","../../../../frontend/pipeline-console-view/pipeline-console/main/scroll-to-top-bottom.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/split-view.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/StageNodeLink.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/symbols.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/stage-details.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/ConsoleLogCard.tsx"],"sourcesContent":["import Tippy, { TippyProps } from \"@tippyjs/react\";\nimport React, { useState } from \"react\";\n\nimport Tooltip from \"./tooltip.tsx\";\n\n/**\n * A customized (and customizable) implementation of Tippy dropdowns\n */\nexport default function Dropdown({\n  items,\n  disabled,\n  className,\n}: DropdownProps) {\n  const [visible, setVisible] = useState(false);\n  const show = () => setVisible(true);\n  const hide = () => setVisible(false);\n\n  return (\n    <Tooltip content={\"More actions\"}>\n      <Tippy\n        visible={visible}\n        onClickOutside={hide}\n        {...DefaultDropdownProps}\n        content={\n          <div className=\"jenkins-dropdown\">\n            {items.map((item, index) => {\n              if (item === \"separator\") {\n                return (\n                  <div\n                    key={`separator-${index}`}\n                    className=\"jenkins-dropdown__separator\"\n                  />\n                );\n              }\n\n              if (React.isValidElement(item)) {\n                return (\n                  <div key={index} className=\"jenkins-dropdown__custom-item\">\n                    {item}\n                  </div>\n                );\n              }\n\n              const dropdownItem = item as DropdownItem;\n              return (\n                <a\n                  key={index}\n                  className=\"jenkins-dropdown__item\"\n                  href={dropdownItem.href}\n                  target={dropdownItem.target}\n                  download={dropdownItem.download}\n                >\n                  <div className=\"jenkins-dropdown__item__icon\">\n                    {dropdownItem.icon}\n                  </div>\n                  {dropdownItem.text}\n                </a>\n              );\n            })}\n          </div>\n        }\n      >\n        <button\n          className={\"jenkins-button \" + className}\n          type=\"button\"\n          disabled={disabled}\n          onClick={visible ? hide : show}\n        >\n          <div className=\"jenkins-overflow-button__ellipsis\">\n            <span />\n            <span />\n            <span />\n          </div>\n        </button>\n      </Tippy>\n    </Tooltip>\n  );\n}\n\nexport const DefaultDropdownProps: TippyProps = {\n  theme: \"dropdown\",\n  duration: 250,\n  touch: true,\n  animation: \"dropdown\",\n  interactive: true,\n  offset: [0, 0],\n  placement: \"bottom-start\",\n  arrow: false,\n};\n\ninterface DropdownProps {\n  items: (DropdownItem | React.ReactElement | \"separator\")[];\n  disabled?: boolean;\n  className?: string;\n}\n\ninterface DropdownItem {\n  text: string;\n  href?: string;\n  icon: React.ReactNode;\n  target?: string;\n  download?: string;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\ninterface DropdownPortalProps {\n  children: React.ReactNode;\n}\n\nexport default function DropdownPortal({ children }: DropdownPortalProps) {\n  const container = document.getElementById(\"console-pipeline-overflow-root\");\n\n  if (!container) {\n    console.error(\"DropdownPortal: Target container not found!\");\n    return null;\n  }\n\n  return ReactDOM.createPortal(children, container);\n}\n","import \"./skeleton.scss\";\n\nimport React from \"react\";\n\nexport default function Skeleton({ height }: { height?: number }) {\n  return (\n    <div\n      className={\"pgv-skeleton\"}\n      style={\n        height\n          ? {\n              height: `${height}rem`,\n            }\n          : {}\n      }\n    />\n  );\n}\n","import \"./stages-customization.scss\";\n\nimport React from \"react\";\n\nimport {\n  MainViewVisibility,\n  StageViewPosition,\n  useLayoutPreferences,\n} from \"../providers/user-preference-provider.tsx\";\n\nexport default function StagesCustomization() {\n  const {\n    mainViewVisibility,\n    setMainViewVisibility,\n    stageViewPosition,\n    setStageViewPosition,\n  } = useLayoutPreferences();\n\n  const handleViewChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setMainViewVisibility(e.target.value as MainViewVisibility);\n  };\n\n  const handlePositionChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setStageViewPosition(e.target.value as StageViewPosition);\n  };\n\n  return (\n    <>\n      <label\n        className=\"jenkins-dropdown__item pgv-stages-customization\"\n        htmlFor=\"main-view-visibility\"\n      >\n        <div className=\"jenkins-dropdown__item__icon\">\n          <ViewIcon\n            mainViewVisibility={mainViewVisibility}\n            stageViewPosition={stageViewPosition}\n          />\n        </div>\n        Views\n        <span>\n          {mainViewVisibility === MainViewVisibility.BOTH && \"Graph and stages\"}\n          {mainViewVisibility === MainViewVisibility.GRAPH_ONLY && \"Graph\"}\n          {mainViewVisibility === MainViewVisibility.STAGES_ONLY && \"Stages\"}\n        </span>\n        <select\n          id=\"main-view-visibility\"\n          value={mainViewVisibility}\n          onChange={handleViewChange}\n        >\n          <option value={MainViewVisibility.BOTH}>Graph and stages</option>\n          <option value={MainViewVisibility.GRAPH_ONLY}>Graph</option>\n          <option value={MainViewVisibility.STAGES_ONLY}>Stages</option>\n        </select>\n      </label>\n\n      <label\n        className=\"jenkins-dropdown__item pgv-stages-customization\"\n        htmlFor=\"stage-view-position\"\n      >\n        <div className=\"jenkins-dropdown__item__icon\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n            <circle\n              cx=\"128\"\n              cy=\"96\"\n              r=\"48\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n            />\n            <circle\n              cx=\"256\"\n              cy=\"416\"\n              r=\"48\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n            />\n            <path\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n              d=\"M256 256v112\"\n            />\n            <circle\n              cx=\"384\"\n              cy=\"96\"\n              r=\"48\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n            />\n            <path\n              d=\"M128 144c0 74.67 68.92 112 128 112M384 144c0 74.67-68.92 112-128 112\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n            />\n          </svg>\n        </div>\n        Graph position\n        <span>\n          {stageViewPosition === StageViewPosition.TOP ? \"Top\" : \"Left\"}\n        </span>\n        <select\n          id=\"stage-view-position\"\n          value={stageViewPosition}\n          onChange={handlePositionChange}\n          disabled={mainViewVisibility === MainViewVisibility.STAGES_ONLY}\n        >\n          <option value={StageViewPosition.TOP}>Top</option>\n          <option value={StageViewPosition.LEFT}>Left</option>\n        </select>\n      </label>\n    </>\n  );\n}\n\nfunction ViewIcon({\n  mainViewVisibility,\n  stageViewPosition,\n}: {\n  mainViewVisibility: MainViewVisibility;\n  stageViewPosition: StageViewPosition;\n}) {\n  if (mainViewVisibility === \"both\" && stageViewPosition === \"top\") {\n    return (\n      <svg\n        width=\"512px\"\n        height=\"512px\"\n        viewBox=\"0 0 512 512\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <g\n          fill=\"none\"\n          fillRule=\"evenodd\"\n          stroke=\"currentColor\"\n          strokeWidth=\"32\"\n        >\n          <rect x=\"31\" y=\"86\" width=\"450\" height=\"340\" rx=\"70\" />\n          <line x1=\"31\" y1=\"180\" x2=\"470\" y2=\"180\" />\n          <line x1=\"184\" y1=\"180\" x2=\"184\" y2=\"420\" />\n        </g>\n      </svg>\n    );\n  }\n\n  if (mainViewVisibility === \"both\" && stageViewPosition === \"left\") {\n    return (\n      <svg\n        width=\"512px\"\n        height=\"512px\"\n        viewBox=\"0 0 512 512\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <g\n          fill=\"none\"\n          fillRule=\"evenodd\"\n          stroke=\"currentColor\"\n          strokeWidth=\"32\"\n        >\n          <rect x=\"31\" y=\"86\" width=\"450\" height=\"340\" rx=\"70\" />\n          <line x1=\"150\" y1=\"100\" x2=\"150\" y2=\"420\" />\n          <line x1=\"280\" y1=\"100\" x2=\"280\" y2=\"420\" />\n        </g>\n      </svg>\n    );\n  }\n\n  if (mainViewVisibility === \"graphOnly\" && stageViewPosition === \"top\") {\n    return (\n      <svg\n        width=\"512px\"\n        height=\"512px\"\n        viewBox=\"0 0 512 512\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <g\n          fill=\"none\"\n          fillRule=\"evenodd\"\n          stroke=\"currentColor\"\n          strokeWidth=\"32\"\n        >\n          <rect x=\"31\" y=\"86\" width=\"450\" height=\"340\" rx=\"70\" />\n          <line x1=\"31\" y1=\"180\" x2=\"470\" y2=\"180\" />\n        </g>\n      </svg>\n    );\n  }\n\n  if (\n    mainViewVisibility === \"stagesOnly\" ||\n    (mainViewVisibility === \"graphOnly\" && stageViewPosition === \"left\")\n  ) {\n    return (\n      <svg\n        width=\"512px\"\n        height=\"512px\"\n        viewBox=\"0 0 512 512\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <g\n          fill=\"none\"\n          fillRule=\"evenodd\"\n          stroke=\"currentColor\"\n          strokeWidth=\"32\"\n        >\n          <rect x=\"31\" y=\"86\" width=\"450\" height=\"340\" rx=\"70\" />\n          <line x1=\"184\" y1=\"100\" x2=\"184\" y2=\"420\" />\n        </g>\n      </svg>\n    );\n  }\n}\n","import \"./filter.scss\";\n\nimport Tippy from \"@tippyjs/react\";\nimport React, { useState } from \"react\";\n\nimport { useFilter } from \"../../pipeline-console-view/pipeline-console/main/providers/filter-provider.tsx\";\nimport { Result } from \"../../pipeline-graph-view/pipeline-graph/main/index.ts\";\nimport { classNames } from \"../utils/classnames.ts\";\nimport { DefaultDropdownProps } from \"./dropdown.tsx\";\nimport StatusIcon from \"./status-icon.tsx\";\nimport Tooltip from \"./tooltip.tsx\";\n\nexport default function Filter({ disabled }: FilterProps) {\n  const [visible, setVisible] = useState(false);\n  const { visibleStatuses, toggleStatus, resetStatuses, allVisible } =\n    useFilter();\n\n  const statuses = [\n    {\n      key: \"running\",\n      text: \"Running\",\n      status: Result.running,\n    },\n    {\n      key: \"success\",\n      text: \"Successful\",\n      status: Result.success,\n    },\n    {\n      key: \"failure\",\n      text: \"Failed\",\n      status: Result.failure,\n    },\n    {\n      key: \"unstable\",\n      text: \"Unstable\",\n      status: Result.unstable,\n    },\n    {\n      key: \"aborted\",\n      text: \"Aborted\",\n      status: Result.aborted,\n    },\n    {\n      key: \"skipped\",\n      text: \"Skipped\",\n      status: Result.skipped,\n    },\n    {\n      key: \"not_built\",\n      text: \"Not built\",\n      status: Result.not_built,\n    },\n  ];\n\n  const show = () => setVisible(true);\n  const hide = () => setVisible(false);\n\n  return (\n    <Tooltip content={\"Filter\"}>\n      <Tippy\n        {...DefaultDropdownProps}\n        visible={visible}\n        onClickOutside={hide}\n        placement=\"bottom\"\n        appendTo={document.body}\n        offset={[0, -1]}\n        content={\n          <div className=\"jenkins-dropdown\">\n            <div className=\"jenkins-dropdown__heading\">\n              Filter\n              {!allVisible && (\n                <button\n                  className={\n                    \"jenkins-button jenkins-button--tertiary jenkins-!-accent-color pgv-reset-button\"\n                  }\n                  onClick={resetStatuses}\n                >\n                  Reset\n                </button>\n              )}\n            </div>\n            {statuses.map((item, index) => (\n              <button\n                key={index}\n                className={classNames(\n                  \"jenkins-dropdown__item\",\n                  \"pgv-filter-button\",\n                  {\n                    \"pgv-filter-button--unchecked\": !visibleStatuses.includes(\n                      item.status,\n                    ),\n                  },\n                )}\n                onClick={() => toggleStatus(item.status)}\n              >\n                <div className=\"jenkins-dropdown__item__icon\">\n                  <StatusIcon\n                    status={item.status}\n                    skeleton={!visibleStatuses.includes(item.status)}\n                    percentage={0}\n                  />\n                </div>\n                {item.text}\n              </button>\n            ))}\n          </div>\n        }\n      >\n        <button\n          className={classNames(\n            \"jenkins-button\",\n            {\n              \"jenkins-button--tertiary\": allVisible,\n            },\n            {\n              \"jenkins-!-accent-color\": !allVisible,\n            },\n          )}\n          type=\"button\"\n          disabled={disabled}\n          onClick={visible ? hide : show}\n        >\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n            <path\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={!allVisible ? 42 : 36}\n              d=\"M32 144h448M112 256h288M208 368h96\"\n            />\n          </svg>\n        </button>\n      </Tippy>\n    </Tooltip>\n  );\n}\n\ninterface FilterProps {\n  disabled?: boolean;\n}\n","import \"./data-tree-view.scss\";\n\nimport React, { useCallback, useEffect, useState } from \"react\";\n\nimport Filter from \"../../../common/components/filter.tsx\";\nimport StatusIcon from \"../../../common/components/status-icon.tsx\";\nimport { classNames } from \"../../../common/utils/classnames.ts\";\nimport { Total } from \"../../../common/utils/timings.tsx\";\nimport {\n  Result,\n  StageInfo,\n} from \"../../../pipeline-graph-view/pipeline-graph/main/index.ts\";\nimport { useFilter } from \"./providers/filter-provider.tsx\";\n\nexport default function DataTreeView({\n  stages,\n  selected,\n  onNodeSelect,\n}: DataTreeViewProps) {\n  const { search, setSearch, visibleStatuses } = useFilter();\n  const filteredStages = filterStageTree(search, visibleStatuses, stages);\n\n  const handleSelect = useCallback(\n    (event: React.MouseEvent, nodeId: string) => {\n      onNodeSelect(event, nodeId);\n    },\n    [onNodeSelect],\n  );\n\n  return (\n    <div>\n      <div className={\"pgw-filter-bar\"}>\n        <div className=\"jenkins-search\">\n          <div className=\"jenkins-search__icon\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n              <path\n                d=\"M221.09 64a157.09 157.09 0 10157.09 157.09A157.1 157.1 0 00221.09 64z\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeMiterlimit=\"10\"\n                strokeWidth=\"32\"\n              />\n              <path\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeLinecap=\"round\"\n                strokeMiterlimit=\"10\"\n                strokeWidth=\"32\"\n                d=\"M338.29 338.29L448 448\"\n              />\n            </svg>\n          </div>\n          <input\n            className=\"jenkins-input jenkins-search__input\"\n            placeholder=\"Search\"\n            type=\"search\"\n            autoComplete=\"off\"\n            autoCorrect=\"off\"\n            autoCapitalize=\"off\"\n            spellCheck=\"false\"\n            value={search}\n            onChange={(e) => setSearch(e.target.value)}\n          />\n        </div>\n        <Filter />\n      </div>\n\n      {filteredStages.length === 0 && (\n        <div className={\"jenkins-notice\"}>\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n            <path\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={36}\n              d=\"M32 144h448M112 256h288M208 368h96\"\n            />\n          </svg>\n          <div>No stages</div>\n        </div>\n      )}\n\n      <div id=\"tasks\" style={{ marginLeft: \"0.7rem\" }}>\n        {filteredStages.map((stage) => (\n          <TreeNode\n            key={stage.id}\n            stage={stage}\n            selected={String(selected)}\n            onSelect={handleSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nconst TreeNode = React.memo(function TreeNode({\n  stage,\n  selected,\n  onSelect,\n}: TreeNodeProps) {\n  const { search, visibleStatuses, allVisible } = useFilter();\n  const hasChildren = stage.children && stage.children.length > 0;\n  const isSelected = String(stage.id) === selected;\n  const [isExpanded, setIsExpanded] = useState<boolean>(\n    hasSelectedDescendant(stage),\n  );\n\n  function hasSelectedDescendant(stage: StageInfo): boolean {\n    return stage.children?.some(\n      (child) => String(child.id) === selected || hasSelectedDescendant(child),\n    );\n  }\n\n  const handleToggleClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setIsExpanded(!isExpanded);\n  };\n\n  useEffect(() => {\n    if (hasSelectedDescendant(stage)) {\n      setIsExpanded(true);\n    }\n  }, [selected]);\n\n  useEffect(() => {\n    if (search.length || !allVisible) {\n      if (filterStageTree(search, visibleStatuses, [stage]).length !== 0) {\n        setIsExpanded(true);\n      }\n    }\n  }, [search, visibleStatuses, allVisible]);\n\n  return (\n    <div className=\"task\">\n      <div className=\"pgv-tree-node-header\">\n        <a\n          href={`?selected-node=` + stage.id}\n          onClick={(e) => {\n            // Only prevent left clicks\n            if (e.button !== 0 || e.metaKey || e.ctrlKey) {\n              return;\n            }\n\n            e.preventDefault();\n\n            history.replaceState({}, \"\", `?selected-node=` + stage.id);\n            if (!isSelected) {\n              onSelect(e, String(stage.id));\n            }\n            setIsExpanded(!isExpanded);\n          }}\n          className={classNames(\"pgv-tree-item\", \"task-link\", {\n            \"task-link--active\": isSelected,\n            \"pgv-tree-item--skeleton\": stage.skeleton,\n          })}\n        >\n          <div>\n            <span className=\"task-icon-link\">\n              <StatusIcon\n                status={stage.state}\n                percentage={stage.completePercent}\n                skeleton={stage.skeleton}\n              />\n            </span>\n            <span className=\"task-link-text\">{stage.name}</span>\n            <span className=\"pgv-tree-item__description\">\n              <Total ms={stage.totalDurationMillis} />\n            </span>\n          </div>\n        </a>\n\n        {hasChildren && (\n          <button\n            className={classNames(\"pgv-toggle-icon\", {\n              \"pgv-toggle-icon--active\": isExpanded,\n            })}\n            onClick={handleToggleClick}\n            aria-label={isExpanded ? \"Collapse\" : \"Expand\"}\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n              <path\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"48\"\n                d=\"M184 112l144 144-144 144\"\n              />\n            </svg>\n          </button>\n        )}\n      </div>\n\n      {hasChildren && isExpanded && (\n        <div className=\"pgv-tree-children\">\n          {stage.children.map((child) => (\n            <TreeNode\n              key={child.id}\n              stage={child}\n              selected={selected}\n              onSelect={onSelect}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n});\n\nconst filterStageTree = (\n  search: string,\n  visibleStatuses: Result[],\n  stages: StageInfo[],\n): StageInfo[] => {\n  return stages\n    .map((stage) => {\n      const filteredChildren = stage.children\n        ? filterStageTree(search, visibleStatuses, stage.children)\n        : [];\n\n      const matchesSelf =\n        stage.name.toLowerCase().includes(search.toLowerCase()) &&\n        visibleStatuses.includes(stage.state);\n\n      // Include this stage if it matches or has matching children\n      if (matchesSelf || filteredChildren.length > 0) {\n        return {\n          ...stage,\n          children: filteredChildren,\n        };\n      }\n\n      return null;\n    })\n    .filter((stage) => stage !== null);\n};\n\ninterface DataTreeViewProps {\n  stages: StageInfo[];\n  selected?: number;\n  onNodeSelect: (event: React.MouseEvent, nodeId: string) => void;\n}\n\ninterface TreeNodeProps {\n  stage: StageInfo;\n  selected: string;\n  onSelect: (event: React.MouseEvent, id: string) => void;\n}\n","// re-export Result so the relative path exists in one location.\nexport * from \"../../../common/RestClient.tsx\";\nexport type {\n  StageInfo,\n  StageType,\n} from \"../../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\nexport { Result } from \"../../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\n\nexport const LOG_FETCH_SIZE = 150 * 1024;\nexport const POLL_INTERVAL = 1000;\n","import { useCallback, useEffect, useRef, useState } from \"react\";\n\nimport useRunPoller from \"../../../../common/tree-api.ts\";\nimport {\n  getConsoleTextOffset,\n  getRunSteps,\n  LOG_FETCH_SIZE,\n  POLL_INTERVAL,\n  Result,\n  StageInfo,\n  StepInfo,\n  StepLogBufferInfo,\n} from \"../PipelineConsoleModel.tsx\";\n\nexport function useStepsPoller(props: RunPollerProps) {\n  const { run, loading } = useRunPoller({\n    currentRunPath: props.currentRunPath,\n    previousRunPath: props.previousRunPath,\n  });\n\n  const [openStage, setOpenStage] = useState(\"\");\n  const [expandedSteps, setExpandedSteps] = useState<string[]>([]);\n  const [steps, setSteps] = useState<StepInfo[]>([]);\n  const [stepBuffers, setStepBuffers] = useState(\n    new Map<string, StepLogBufferInfo>(),\n  );\n  const [userManuallySetNode, setUserManuallySetNode] = useState(false);\n\n  const stepsRef = useRef<StepInfo[]>([]);\n\n  const updateStepConsoleOffset = useCallback(\n    async (stepId: string, forceUpdate: boolean, startByte: number) => {\n      const stepBuffer = stepBuffers.get(stepId) ?? {\n        lines: [],\n        startByte: 0 - LOG_FETCH_SIZE,\n        endByte: -1,\n        stepId,\n      };\n      if (stepBuffer.startByte > 0 && !forceUpdate) return;\n      const response = await getConsoleTextOffset(stepId, startByte);\n      if (!response) return;\n\n      const newLogLines = response.text.trim().split(\"\\n\") || [];\n\n      if (stepBuffer.endByte > 0 && stepBuffer.endByte <= startByte) {\n        stepBuffer.lines = [...stepBuffer.lines, ...newLogLines];\n      } else {\n        stepBuffer.lines = newLogLines;\n        stepBuffer.startByte = response.startByte;\n      }\n\n      stepBuffer.endByte = response.endByte;\n\n      setStepBuffers((prev) => new Map(prev).set(stepId, stepBuffer));\n    },\n    [],\n  );\n\n  const parseUrlParams = useCallback(\n    (steps: StepInfo[]): boolean => {\n      const params = new URLSearchParams(document.location.search.substring(1));\n      let selected = params.get(\"selected-node\");\n      if (!selected) {\n        return false;\n      }\n\n      setUserManuallySetNode(true);\n\n      const step = steps.find((s) => s.id === selected);\n      const expanded: string[] = [];\n\n      if (step) {\n        selected = step.stageId;\n        expanded.push(step.id);\n\n        updateStepConsoleOffset(\n          step.id,\n          false,\n          parseInt(params.get(\"start-byte\") || `${0 - LOG_FETCH_SIZE}`),\n        );\n      }\n\n      setOpenStage(selected);\n      setExpandedSteps(expanded);\n      return true;\n    },\n    [updateStepConsoleOffset],\n  );\n\n  const getDefaultSelectedStep = (steps: StepInfo[]) => {\n    if (userManuallySetNode) {\n      return;\n    }\n\n    let selectedStep = steps.find((step) => step !== undefined);\n    if (!steps || steps.length === 0 || !selectedStep) {\n      return null;\n    }\n    for (const step of steps) {\n      const stepResult = step.state.toLowerCase() as Result;\n      const selectedStepResult = selectedStep?.state.toLowerCase() as Result;\n      switch (stepResult) {\n        case Result.running:\n        case Result.queued:\n        case Result.paused:\n          // Return first running/queued/paused step.\n          return step;\n        case Result.unstable:\n        case Result.failure:\n        case Result.aborted:\n          if (selectedStepResult && stepResult < selectedStepResult) {\n            // Return first unstable/failed/aborted step which has a state worse than the selectedStep.\n            // E.g. if the first step state is failure we want to return that over a later unstable step.\n            return step;\n          }\n          continue;\n        default:\n          // Otherwise select the step with the worst result with the largest id - e.g. (last step if all successful).\n          if (selectedStepResult && stepResult <= selectedStepResult) {\n            selectedStep = step;\n          }\n      }\n    }\n    return selectedStep;\n  };\n\n  useEffect(() => {\n    getRunSteps()\n      .then((steps) => {\n        steps = steps || [];\n        setSteps(steps);\n\n        const usedUrl = parseUrlParams(steps);\n        if (!usedUrl) {\n          const defaultStep = getDefaultSelectedStep(steps);\n          if (defaultStep) {\n            setOpenStage(defaultStep.stageId);\n\n            if (defaultStep.stageId) {\n              setExpandedSteps((prev) => [...prev, defaultStep.id]);\n              updateStepConsoleOffset(\n                defaultStep.id,\n                false,\n                0 - LOG_FETCH_SIZE,\n              );\n            }\n          }\n        }\n\n        if (!run?.complete) {\n          startPollingPipeline({\n            getStateUpdateFn: getRunSteps,\n            onData: (data) => {\n              const hasNewSteps =\n                JSON.stringify(stepsRef.current) !== JSON.stringify(data);\n\n              if (userManuallySetNode) {\n                const defaultStep = getDefaultSelectedStep(steps);\n                if (defaultStep) {\n                  setOpenStage(defaultStep.stageId);\n\n                  if (defaultStep.stageId) {\n                    setExpandedSteps((prev) => [...prev, defaultStep.id]);\n                    updateStepConsoleOffset(\n                      defaultStep.id,\n                      false,\n                      0 - LOG_FETCH_SIZE,\n                    );\n                  }\n                }\n              }\n\n              if (hasNewSteps) {\n                setSteps(data);\n                stepsRef.current = data;\n              }\n            },\n            checkComplete: () => !run?.complete,\n            interval: POLL_INTERVAL,\n          });\n        }\n        return null;\n      })\n      .catch((error) => {\n        console.error(\"Error in getRunSteps:\", error);\n      });\n  }, [run?.stages]);\n\n  const handleStageSelect = useCallback(\n    (nodeId: string) => {\n      setUserManuallySetNode(true);\n\n      if (!nodeId) return;\n      if (nodeId === openStage) return; // skip if already selected\n\n      const stepsForStage = steps.filter((step) => step.stageId === nodeId);\n      const lastStep = stepsForStage[stepsForStage.length - 1];\n      const newlyExpandedSteps = lastStep ? [lastStep.id] : [];\n\n      setOpenStage(nodeId);\n      setExpandedSteps((prev) => [...prev, ...newlyExpandedSteps]);\n\n      if (lastStep) {\n        updateStepConsoleOffset(lastStep.id, false, 0 - LOG_FETCH_SIZE);\n      }\n    },\n    [openStage, steps, updateStepConsoleOffset],\n  );\n\n  const onStepToggle = (nodeId: string) => {\n    setUserManuallySetNode(true);\n    if (!expandedSteps.includes(nodeId)) {\n      setExpandedSteps((prev) => [...prev, nodeId]);\n      updateStepConsoleOffset(nodeId, false, 0 - LOG_FETCH_SIZE);\n    } else {\n      setExpandedSteps((prev) => prev.filter((id) => id !== nodeId));\n    }\n  };\n\n  const onMoreConsoleClick = (nodeId: string, startByte: number) => {\n    updateStepConsoleOffset(nodeId, true, startByte);\n  };\n\n  const getStageSteps = (stageId: string) => {\n    return steps.filter((step) => step.stageId === stageId);\n  };\n\n  const getStageStepBuffers = (stageId: string) => {\n    const buffers = new Map<string, StepLogBufferInfo>();\n    steps.forEach((step) => {\n      if (step.stageId === stageId && stepBuffers.has(step.id)) {\n        buffers.set(step.id, stepBuffers.get(step.id)!);\n      }\n    });\n    return buffers;\n  };\n\n  const getOpenStage = (): StageInfo | null => {\n    const findStage = (stages: StageInfo[]): StageInfo | null => {\n      for (const stage of stages) {\n        if (String(stage.id) === openStage) return stage;\n        if (stage.children.length > 0) {\n          const result = findStage(stage.children);\n          if (result) return result;\n        }\n      }\n      return null;\n    };\n    return openStage ? findStage(run?.stages || []) : null;\n  };\n\n  return {\n    openStage: getOpenStage(),\n    openStageSteps: getStageSteps(openStage),\n    openStageStepBuffers: getStageStepBuffers(openStage),\n    expandedSteps,\n    stages: run?.stages || [],\n    handleStageSelect,\n    onStepToggle,\n    onMoreConsoleClick,\n    loading,\n  };\n}\n\n/**\n * Starts polling a function until a complete condition is met.\n */\nconst startPollingPipeline = ({\n  getStateUpdateFn,\n  onData,\n  checkComplete,\n  interval = 1000,\n}: {\n  getStateUpdateFn: () => Promise<StepInfo[] | null>;\n  onData: (data: StepInfo[]) => void;\n  checkComplete: (data: StepInfo[]) => boolean;\n  interval?: number;\n}): (() => void) => {\n  let polling = true;\n\n  const poll = async () => {\n    while (polling) {\n      const data = (await getStateUpdateFn()) || [];\n      onData(data);\n\n      if (checkComplete(data)) {\n        polling = false;\n        break;\n      }\n\n      await new Promise((resolve) => setTimeout(resolve, interval));\n    }\n  };\n\n  setTimeout(poll, interval);\n\n  return () => {\n    polling = false;\n  };\n};\n\ninterface RunPollerProps {\n  currentRunPath: string;\n  previousRunPath?: string;\n}\n","import \"./scroll-to-top-bottom.scss\";\n\nimport React, { useEffect, useState } from \"react\";\n\nimport { classNames } from \"../../../common/utils/classnames.ts\";\n\nexport default function ScrollToTopBottom() {\n  const [isAtTop, setIsAtTop] = useState(true);\n  const [isAtBottom, setIsAtBottom] = useState(false);\n  const [isScrollable, setIsScrollable] = useState(false);\n\n  useEffect(() => {\n    const updateScrollState = () => {\n      const scrollTop =\n        window.pageYOffset || document.documentElement.scrollTop;\n      const windowHeight = window.innerHeight;\n      const docHeight = document.documentElement.scrollHeight;\n\n      const atTop = scrollTop <= 10;\n      const atBottom = scrollTop + windowHeight >= docHeight - 10;\n      const scrollable = docHeight > windowHeight + 10;\n\n      setIsAtTop(atTop);\n      setIsAtBottom(atBottom);\n      setIsScrollable(scrollable);\n\n      // Distance from bottom\n      const distanceFromBottom = docHeight - (scrollTop + windowHeight);\n\n      // Only trigger the offset if we're within 20px from the bottom\n      const offset = Math.max(0, Math.min(100, 100 - distanceFromBottom));\n\n      const root = document.documentElement;\n      root.style.setProperty(\"--pgv-offset-bottom\", `${offset}px`);\n    };\n\n    updateScrollState();\n\n    window.addEventListener(\"scroll\", updateScrollState);\n    window.addEventListener(\"resize\", updateScrollState);\n\n    const observer = new MutationObserver(updateScrollState);\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true,\n      attributes: true,\n      characterData: true,\n    });\n\n    return () => {\n      window.removeEventListener(\"scroll\", updateScrollState);\n      window.removeEventListener(\"resize\", updateScrollState);\n      observer.disconnect();\n    };\n  }, []);\n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n    });\n  };\n\n  const scrollToBottom = () => {\n    window.scrollTo({\n      top: document.documentElement.scrollHeight,\n    });\n  };\n\n  return (\n    <div\n      className={classNames(`pgv-scroll-to-top-bottom`, {\n        \"pgv-scroll-to-top-bottom--visible\": isScrollable,\n      })}\n      aria-hidden={!isScrollable}\n    >\n      <button\n        onClick={scrollToTop}\n        className=\"jenkins-button\"\n        disabled={isAtTop}\n      >\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n          <path\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"48\"\n            d=\"M112 244l144-144 144 144M256 120v292\"\n          />\n        </svg>\n      </button>\n      <button\n        onClick={scrollToBottom}\n        className=\"jenkins-button\"\n        disabled={isAtBottom}\n      >\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n          <path\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"48\"\n            d=\"M112 268l144 144 144-144M256 392V100\"\n          />\n        </svg>\n      </button>\n    </div>\n  );\n}\n","import \"./split-view.scss\";\n\nimport React, { useEffect, useRef, useState } from \"react\";\n\nimport { useLayoutPreferences } from \"./providers/user-preference-provider.tsx\";\n\nexport default function SplitView(props: SplitViewNewProps) {\n  const {\n    setTreeViewWidth,\n    setStageViewWidth,\n    setStageViewHeight,\n    treeViewWidth,\n    stageViewWidth,\n    stageViewHeight,\n  } = useLayoutPreferences();\n\n  const { direction = \"horizontal\", storageKey } = props;\n  const [isDragging, setIsDragging] = useState(false);\n\n  const isVertical = direction === \"vertical\";\n\n  const initialSize = (() => {\n    if (storageKey === \"stages\") return treeViewWidth;\n    if (storageKey === \"graph\") {\n      return isVertical ? stageViewHeight : stageViewWidth;\n    }\n    return 300; // fallback\n  })();\n\n  useEffect(() => {\n    const newSize = (() => {\n      if (storageKey === \"stages\") return treeViewWidth;\n      if (storageKey === \"graph\") {\n        return direction === \"vertical\" ? stageViewHeight : stageViewWidth;\n      }\n      return 300;\n    })();\n\n    setPanelSize(newSize);\n  }, [direction, treeViewWidth, stageViewWidth, stageViewHeight, storageKey]);\n\n  const [panelSize, setPanelSize] = useState<number>(initialSize);\n\n  const dividerRef = useRef<HTMLDivElement>(null);\n\n  const startDragging = (e: React.MouseEvent) => {\n    setIsDragging(true);\n    e.preventDefault();\n  };\n\n  const stopDragging = () => setIsDragging(false);\n\n  const handleDragging = (e: MouseEvent) => {\n    if (!isDragging) return;\n\n    // Dynamically follow mouse based on direction\n    const newSize =\n      direction === \"vertical\"\n        ? e.clientY - getContainerOffset()\n        : e.clientX - getContainerOffset();\n\n    const clampedSize = Math.max(\n      direction === \"vertical\" ? 100 : 200,\n      Math.min(newSize, 1500),\n    );\n    setPanelSize(clampedSize);\n\n    // Update context sizes\n    if (storageKey === \"stages\") {\n      setTreeViewWidth(clampedSize);\n    } else if (storageKey === \"graph\") {\n      if (direction === \"vertical\") {\n        setStageViewHeight(clampedSize);\n      } else {\n        setStageViewWidth(clampedSize);\n      }\n    }\n  };\n\n  const handleDoubleClick = () => {\n    const resetSize = (() => {\n      if (storageKey === \"stages\") return 300;\n      if (storageKey === \"graph\") return isVertical ? 250 : 600;\n      return 300;\n    })();\n\n    setPanelSize(resetSize);\n\n    if (storageKey === \"stages\") {\n      setTreeViewWidth(resetSize);\n    } else if (storageKey === \"graph\") {\n      if (direction === \"vertical\") {\n        setStageViewHeight(resetSize);\n      } else {\n        setStageViewWidth(resetSize);\n      }\n    }\n  };\n\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getContainerOffset = () => {\n    if (containerRef.current) {\n      const rect = containerRef.current.getBoundingClientRect();\n      return direction === \"vertical\" ? rect.top : rect.left;\n    }\n    return 0;\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"mousemove\", handleDragging);\n    window.addEventListener(\"mouseup\", stopDragging);\n    return () => {\n      window.removeEventListener(\"mousemove\", handleDragging);\n      window.removeEventListener(\"mouseup\", stopDragging);\n    };\n  });\n\n  // If we only have one child, just return it\n  const childrenArray = React.Children.toArray(props.children).filter(Boolean);\n  if (childrenArray.length === 1) {\n    return <>{childrenArray[0]}</>;\n  }\n\n  const gridTemplate =\n    direction === \"vertical\" ? `${panelSize}px 1fr` : `${panelSize}px 1fr`;\n\n  return (\n    <div\n      ref={containerRef}\n      className=\"pgv-split-view__container\"\n      style={{\n        display: \"grid\",\n        gridTemplateColumns:\n          direction === \"vertical\" ? undefined : gridTemplate,\n        gridTemplateRows: direction === \"vertical\" ? gridTemplate : undefined,\n      }}\n    >\n      <div className=\"pgv-split-view__side-panel\">\n        {childrenArray[0]}\n        <div\n          ref={dividerRef}\n          onMouseDown={startDragging}\n          onDoubleClick={handleDoubleClick}\n          className={`pgv-split-view__divider ${\n            direction === \"vertical\" ? \"pgv-split-view__divider--vertical\" : \"\"\n          }`}\n        />\n      </div>\n      <div>{childrenArray[1]}</div>\n    </div>\n  );\n}\n\ninterface SplitViewNewProps {\n  children: React.ReactNode[];\n  direction?: \"horizontal\" | \"vertical\";\n  storageKey: \"stages\" | \"graph\";\n}\n","import React from \"react\";\n\nexport default function StageNodeLink({ agent }: StageNodeLinkProps) {\n  if (!agent) {\n    return null;\n  }\n\n  const agentName = agent === \"built-in\" ? \"Jenkins\" : agent;\n  const href = getAgentUrl(agent);\n\n  function getAgentUrl(name: string) {\n    // Wrap built-in in brackets\n    const id = name === \"built-in\" ? \"(built-in)\" : name;\n    const rootPath = document.head.dataset.rooturl;\n    return `${rootPath}/computer/${id}/`;\n  }\n\n  return (\n    <li>\n      <a\n        href={href}\n        className={\"jenkins-button jenkins-button--tertiary\"}\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        <svg\n          width=\"512px\"\n          height=\"512px\"\n          viewBox=\"0 0 512 512\"\n          version=\"1.1\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <g\n            stroke=\"none\"\n            strokeWidth=\"1\"\n            fill=\"none\"\n            fillRule=\"evenodd\"\n            strokeLinejoin=\"round\"\n          >\n            <g\n              transform=\"translate(32.000000, 64.000000)\"\n              stroke=\"currentColor\"\n              strokeWidth=\"32\"\n            >\n              <rect x=\"0\" y=\"0\" width=\"448\" height=\"320\" rx=\"32\" />\n              <polygon\n                strokeLinecap=\"round\"\n                fillRule=\"nonzero\"\n                points=\"272 384 264 320 184 320 176 384\"\n              />\n              <line x1=\"336\" y1=\"384\" x2=\"112\" y2=\"384\" strokeLinecap=\"round\" />\n            </g>\n          </g>\n        </svg>\n        {agentName}\n      </a>\n    </li>\n  );\n}\n\ninterface StageNodeLinkProps {\n  agent?: string;\n}\n","import React from \"react\";\n\nexport const DOCUMENT = (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n    <path\n      d=\"M416 221.25V416a48 48 0 01-48 48H144a48 48 0 01-48-48V96a48 48 0 0148-48h98.75a32 32 0 0122.62 9.37l141.26 141.26a32 32 0 019.37 22.62z\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"32\"\n    />\n    <path\n      d=\"M256 56v120a32 32 0 0032 32h120M176 288h160M176 368h160\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"32\"\n    />\n  </svg>\n);\n\nexport const CONSOLE = (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n    <rect\n      x=\"32\"\n      y=\"48\"\n      width=\"448\"\n      height=\"416\"\n      rx=\"48\"\n      ry=\"48\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"32\"\n    />\n    <path\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"32\"\n      d=\"M96 112l80 64-80 64M192 240h64\"\n    />\n  </svg>\n);\n","import \"./stage-details.scss\";\n\nimport React from \"react\";\n\nimport Dropdown from \"../../../common/components/dropdown.tsx\";\nimport StatusIcon, {\n  resultToColor,\n} from \"../../../common/components/status-icon.tsx\";\nimport Tooltip from \"../../../common/components/tooltip.tsx\";\nimport {\n  exact,\n  Paused,\n  Started,\n  Total,\n} from \"../../../common/utils/timings.tsx\";\nimport { StageInfo } from \"../../../pipeline-graph-view/pipeline-graph/main/index.ts\";\nimport StageNodeLink from \"./StageNodeLink.tsx\";\nimport { DOCUMENT } from \"./symbols.tsx\";\n\nexport default function StageDetails({ stage }: StageDetailsProps) {\n  if (!stage) {\n    return null;\n  }\n\n  return (\n    <div\n      className={\n        \"pgv-stage-details \" + resultToColor(stage.state, stage.skeleton)\n      }\n    >\n      {stage.state === \"running\" && (\n        <div className={\"pgv-stage-details__running\"} />\n      )}\n      <div>\n        <StatusIcon\n          status={stage.state}\n          skeleton={stage.skeleton}\n          percentage={stage.completePercent}\n        />\n        <h2>{stage.name}</h2>\n      </div>\n      <ul>\n        <li>\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n            <path\n              d=\"M112.91 128A191.85 191.85 0 0064 254c-1.18 106.35 85.65 193.8 192 194 106.2.2 192-85.83 192-192 0-104.54-83.55-189.61-187.5-192a4.36 4.36 0 00-4.5 4.37V152\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n            />\n            <path\n              d=\"M233.38 278.63l-79-113a8.13 8.13 0 0111.32-11.32l113 79a32.5 32.5 0 01-37.25 53.26 33.21 33.21 0 01-8.07-7.94z\"\n              fill=\"currentColor\"\n            />\n          </svg>\n          <Total ms={stage.totalDurationMillis} />\n        </li>\n        <li>\n          <Tooltip content={exact(stage.startTimeMillis)}>\n            <span>\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                <path\n                  d=\"M256 64C150 64 64 150 64 256s86 192 192 192 192-86 192-192S362 64 256 64z\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  strokeMiterlimit=\"10\"\n                  strokeWidth=\"32\"\n                />\n                <path\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth=\"32\"\n                  d=\"M256 128v144h96\"\n                />\n              </svg>\n              <Started since={stage.startTimeMillis} />\n            </span>\n          </Tooltip>\n        </li>\n        {stage.pauseDurationMillis !== 0 && (\n          <li>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n              <path\n                d=\"M145.61 464h220.78c19.8 0 35.55-16.29 33.42-35.06C386.06 308 304 310 304 256s83.11-51 95.8-172.94c2-18.78-13.61-35.06-33.41-35.06H145.61c-19.8 0-35.37 16.28-33.41 35.06C124.89 205 208 201 208 256s-82.06 52-95.8 172.94c-2.14 18.77 13.61 35.06 33.41 35.06z\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"32\"\n              />\n              <path\n                d=\"M343.3 432H169.13c-15.6 0-20-18-9.06-29.16C186.55 376 240 356.78 240 326V224c0-19.85-38-35-61.51-67.2-3.88-5.31-3.49-12.8 6.37-12.8h142.73c8.41 0 10.23 7.43 6.4 12.75C310.82 189 272 204.05 272 224v102c0 30.53 55.71 47 80.4 76.87 9.95 12.04 6.47 29.13-9.1 29.13z\"\n                fill=\"currentColor\"\n              />\n            </svg>\n            <Paused since={stage.pauseDurationMillis} />\n          </li>\n        )}\n        <StageNodeLink agent={stage.agent} />\n        <li>\n          <Dropdown\n            className={\"jenkins-button--tertiary\"}\n            disabled={stage.synthetic}\n            items={[\n              {\n                text: \"View stage as plain text\",\n                icon: DOCUMENT,\n                href: `log?nodeId=${stage.id}`,\n                target: \"_blank\",\n              },\n              {\n                text: \"Download stage logs\",\n                icon: (\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                    <path\n                      d=\"M336 176h40a40 40 0 0140 40v208a40 40 0 01-40 40H136a40 40 0 01-40-40V216a40 40 0 0140-40h40\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth=\"32\"\n                    />\n                    <path\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth=\"32\"\n                      d=\"M176 272l80 80 80-80M256 48v288\"\n                    />\n                  </svg>\n                ),\n                href: `log?nodeId=${stage.id}`,\n                download: `${stage.name}.txt`,\n              },\n            ]}\n          />\n        </li>\n      </ul>\n    </div>\n  );\n}\n\ninterface StageDetailsProps {\n  stage: StageInfo | null;\n}\n","import \"./console-log-card.scss\";\n\nimport React, { Suspense, useEffect } from \"react\";\n\nimport StatusIcon from \"../../../common/components/status-icon.tsx\";\nimport Tooltip from \"../../../common/components/tooltip.tsx\";\nimport { classNames } from \"../../../common/utils/classnames.ts\";\nimport { Total } from \"../../../common/utils/timings.tsx\";\nimport {\n  LOG_FETCH_SIZE,\n  StepInfo,\n  StepLogBufferInfo,\n} from \"./PipelineConsoleModel.tsx\";\n\nconst ConsoleLogStream = React.lazy(() => import(\"./ConsoleLogStream.tsx\"));\n\nexport default function ConsoleLogCard(props: ConsoleLogCardProps) {\n  useEffect(() => {\n    if (props.isExpanded) {\n      props.onMoreConsoleClick(props.step.id, props.stepBuffer.startByte);\n    }\n  }, [props.isExpanded]);\n\n  const handleToggle = (e: React.MouseEvent<HTMLElement>) => {\n    // Only prevent left clicks\n    if (e.button !== 0 || e.metaKey || e.ctrlKey) {\n      return;\n    }\n\n    e.preventDefault();\n\n    history.replaceState({}, \"\", `?selected-node=` + props.step.id);\n\n    props.onStepToggle(props.step.id);\n  };\n\n  const showMoreLogs = () => {\n    let startByte = props.stepBuffer.startByte - LOG_FETCH_SIZE;\n    if (startByte < 0) startByte = 0;\n    props.onMoreConsoleClick(props.step.id, startByte);\n  };\n\n  const getTruncatedLogWarning = () => {\n    if (props.stepBuffer.lines && props.stepBuffer.startByte > 0) {\n      return (\n        <button\n          onClick={showMoreLogs}\n          className={\n            \"pgv-show-more-logs jenkins-button jenkins-!-warning-color\"\n          }\n        >\n          There’s more to see - {prettySizeString(props.stepBuffer.startByte)}{\" \"}\n          of logs hidden\n        </button>\n      );\n    }\n    return undefined;\n  };\n\n  const prettySizeString = (size: number) => {\n    const kib = 1024;\n    const mib = 1024 * 1024;\n    const gib = 1024 * 1024 * 1024;\n    if (size < kib) return `${size}B`;\n    if (size < mib) return `${(size / kib).toFixed(2)}KiB`;\n    if (size < gib) return `${(size / mib).toFixed(2)}MiB`;\n    return `${(size / gib).toFixed(2)}GiB`;\n  };\n\n  return (\n    <div className={\"pgv-step-detail-group\"} key={`step-card-${props.step.id}`}>\n      <div\n        className={classNames(\"pgv-step-detail-header\", \"jenkins-button\", {\n          \"jenkins-button--tertiary\": !props.isExpanded,\n        })}\n      >\n        <a\n          href={`?selected-node=` + props.step.id}\n          onClick={handleToggle}\n          key={`step-action-area-${props.step.id}`}\n        >\n          <div className=\"pgv-step-detail-header__content\">\n            <StatusIcon\n              status={props.step.state}\n              percentage={props.step.completePercent}\n            />\n\n            {props.step.title !== \"\" && <span>{props.step.title}</span>}\n\n            {props.step.name !== \"\" && <span>{props.step.name}</span>}\n\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 512 512\"\n              className={\"pgv-step-detail-header__chevron\"}\n              style={{ rotate: props.isExpanded ? \"90deg\" : \"0deg\" }}\n            >\n              <path\n                fill=\"none\"\n                stroke=\"var(--text-color-secondary)\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"48\"\n                opacity={0.75}\n                d=\"M184 112l144 144-144 144\"\n              />\n            </svg>\n          </div>\n\n          <div className=\"pgv-step-detail-header__actions\">\n            <span\n              style={{\n                color: \"var(--text-color-secondary)\",\n                fontWeight: \"normal\",\n              }}\n            >\n              <Total ms={props.step.totalDurationMillis} />\n            </span>\n          </div>\n        </a>\n\n        <Tooltip content={\"View step as plain text\"}>\n          <a\n            href={`log?nodeId=${props.step.id}`}\n            className={\"jenkins-button jenkins-button--tertiary\"}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n              <path\n                d=\"M384 224v184a40 40 0 01-40 40H104a40 40 0 01-40-40V168a40 40 0 0140-40h167.48M336 64h112v112M224 288L440 72\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"32\"\n              />\n            </svg>\n          </a>\n        </Tooltip>\n      </div>\n\n      {props.isExpanded && (\n        <div style={{ paddingTop: \"0.5rem\" }}>\n          {getTruncatedLogWarning()}\n          <Suspense>\n            <ConsoleLogStream\n              logBuffer={props.stepBuffer}\n              onMoreConsoleClick={props.onMoreConsoleClick}\n              step={props.step}\n              maxHeightScale={0.65}\n            />\n          </Suspense>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport type ConsoleLogCardProps = {\n  step: StepInfo;\n  stepBuffer: StepLogBufferInfo;\n  isExpanded: boolean;\n  onStepToggle: (nodeId: string) => void;\n  onMoreConsoleClick: (nodeId: string, startByte: number) => void;\n};\n"],"file":"assets/PipelineConsole-C4FYeywb.js"}