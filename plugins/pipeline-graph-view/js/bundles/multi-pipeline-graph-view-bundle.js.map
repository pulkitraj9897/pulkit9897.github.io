{"version":3,"file":"multi-pipeline-graph-view-bundle.js","sources":["../../../frontend/multi-pipeline-graph-view/multi-pipeline-graph/main/SingleRun.tsx","../../../frontend/multi-pipeline-graph-view/multi-pipeline-graph/main/support/startPollingRunsStatus.ts","../../../frontend/multi-pipeline-graph-view/multi-pipeline-graph/main/MultiPipelineGraph.tsx","../../../frontend/multi-pipeline-graph-view/app.tsx","../../../frontend/multi-pipeline-graph-view/index.tsx"],"sourcesContent":["import \"./single-run.scss\";\n\nimport React from \"react\";\n\nimport StatusIcon from \"../../../common/components/status-icon.tsx\";\nimport useRunPoller from \"../../../common/tree-api.ts\";\nimport { time, Total } from \"../../../common/utils/timings.tsx\";\nimport { LayoutInfo } from \"../../../pipeline-graph-view/pipeline-graph/main/index.ts\";\nimport { PipelineGraph } from \"../../../pipeline-graph-view/pipeline-graph/main/PipelineGraph.tsx\";\nimport { defaultLayout } from \"../../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\nimport { RunInfo } from \"./MultiPipelineGraphModel.ts\";\n\nexport default function SingleRun({ run, currentJobPath }: SingleRunProps) {\n  const { run: runInfo } = useRunPoller({\n    currentRunPath: currentJobPath + run.id + \"/\",\n  });\n\n  const layout: LayoutInfo = {\n    ...defaultLayout,\n    nodeSpacingH: 45,\n  };\n\n  return (\n    <div className=\"pgv-single-run\">\n      <div>\n        <a href={currentJobPath + run.id} className=\"pgw-user-specified-text\">\n          <StatusIcon status={run.result} />\n          {run.displayName}\n          <span>\n            {time(run.timestamp)} - <Total ms={run.duration} />\n          </span>\n        </a>\n      </div>\n      <PipelineGraph stages={runInfo?.stages || []} layout={layout} collapsed />\n    </div>\n  );\n}\n\ninterface SingleRunProps {\n  run: RunInfo;\n  currentJobPath: string;\n}\n","import { RunInfo } from \"../MultiPipelineGraphModel.ts\";\n\n/**\n * Starts polling the server to retrieve pipeline status.\n * Will only stop once the run is finished.\n */\nexport default function startPollingRunsStatus(\n  pathPrefix: string,\n  onFetchSuccess: (data: Array<RunInfo>) => void,\n  onFetchError: (err: Error) => void,\n  interval = 10000,\n) {\n  const path = pathPrefix + \"multi-pipeline-graph/runs\";\n\n  async function fetchPipelineData() {\n    try {\n      const res = await fetch(path);\n      const result = await res.json();\n      onFetchSuccess(result.data);\n    } catch (err) {\n      // TODO: implement exponential backoff of the timeout interval\n      onFetchError(err);\n    } finally {\n      setTimeout(() => fetchPipelineData(), interval);\n    }\n  }\n  fetchPipelineData();\n}\n","import React, { useContext, useEffect, useState } from \"react\";\n\nimport { I18NContext } from \"../../../common/i18n/index.ts\";\nimport { RunInfo } from \"./MultiPipelineGraphModel.ts\";\nimport SingleRun from \"./SingleRun.tsx\";\nimport startPollingRunsStatus from \"./support/startPollingRunsStatus.ts\";\n\nexport const MultiPipelineGraph = () => {\n  const [runs, setRuns] = useState<Array<RunInfo>>([]);\n  const [poll, setPoll] = useState(false);\n\n  const rootElement = document.getElementById(\"multiple-pipeline-root\");\n  const currentJobPath = rootElement?.dataset.currentJobPath!;\n\n  useEffect(() => {\n    if (!poll) {\n      setPoll(true);\n      startPollingRunsStatus(currentJobPath, setRuns, (err) => {\n        console.log(err);\n      });\n    }\n  }, [runs, poll]);\n\n  const groupedRuns: Record<string, RunInfo[]> = runs.reduce(\n    (acc: Record<string, RunInfo[]>, run) => {\n      const date = new Date(run.timestamp).toLocaleDateString(\"en-US\", {\n        year: \"numeric\",\n        month: \"long\",\n        day: \"numeric\",\n      });\n\n      if (!acc[date]) {\n        acc[date] = [];\n      }\n      acc[date].push(run);\n\n      return acc;\n    },\n    {},\n  );\n\n  const messages = useContext(I18NContext);\n\n  return (\n    <>\n      {Object.keys(groupedRuns).length === 0 ? (\n        <div className=\"pgv-stages__group\">\n          <div className=\"pgv-stages__heading\">\n            {messages.format(\"noBuilds\")}\n          </div>\n        </div>\n      ) : (\n        Object.entries(groupedRuns).map(([date, runsOnDate]) => (\n          <div className={\"pgv-stages__group\"} key={date}>\n            <p className=\"pgv-stages__heading\">{date}</p>\n            {runsOnDate.map((run) => (\n              <SingleRun\n                key={run.id}\n                run={run}\n                currentJobPath={currentJobPath}\n              />\n            ))}\n          </div>\n        ))\n      )}\n    </>\n  );\n};\n","import \"./app.scss\";\nimport \"./multi-pipeline-graph/styles/main.scss\";\n\nimport React, { FunctionComponent } from \"react\";\n\nimport { I18NProvider, ResourceBundleName } from \"../common/i18n/index.ts\";\nimport { MultiPipelineGraph } from \"./multi-pipeline-graph/main/index.ts\";\n\nconst App: FunctionComponent = () => {\n  const locale =\n    document.getElementById(\"multiple-pipeline-root\")?.dataset.userLocale ??\n    \"en\";\n  return (\n    <div>\n      <I18NProvider bundles={[ResourceBundleName.messages]} locale={locale}>\n        <MultiPipelineGraph />\n      </I18NProvider>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOMClient from \"react-dom/client\";\n\nimport App from \"./app.tsx\";\n\nconst rootElement = document.getElementById(\"multiple-pipeline-root\");\nif (!rootElement) {\n  throw new Error(\"Failed to find the 'multiple-pipeline-root' element\");\n}\nconst root = ReactDOMClient.createRoot(rootElement);\n\n// Render App\nroot.render(<App />);\n"],"names":["SingleRun","run","currentJobPath","runInfo","useRunPoller","layout","defaultLayout","jsxs","jsx","StatusIcon","time","Total","PipelineGraph","startPollingRunsStatus","pathPrefix","onFetchSuccess","onFetchError","interval","path","fetchPipelineData","result","err","MultiPipelineGraph","runs","setRuns","useState","poll","setPoll","rootElement","useEffect","groupedRuns","acc","date","messages","useContext","I18NContext","Fragment","runsOnDate","App","locale","_a","I18NProvider","ResourceBundleName","root","ReactDOMClient"],"mappings":"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"}